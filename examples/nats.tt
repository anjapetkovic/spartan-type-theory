(* Load "examples/nats.tt". *)
(* ./spartan.native examples/nats.tt -V 3 *)
(* rlwrap ./spartan.native *)


Axiom P : nat â†’ Type.
Definition one := succ zero. 
Definition two := succ one.
Eval one.

Axiom u : P two. 

Check u : P two.
Check u: P (succ (succ zero)). 

Axiom A : Type.
Definition B := exists x : A, nat.
Axiom a : A. 
Check (a, one) : B.

Definition D := exists (x : A) (y: nat), P y. 
Check (a, (two, u)) : D.

Axiom G : Type.
Axiom Q: (nat -> G -> nat) -> Type.

Definition differentOne := match zero with zero -> succ zero | succ m -> succ m.
Check differentOne.
Eval differentOne.
Definition testFunction1 := fun (s : nat) => match s with zero -> fun t : G => zero | succ m -> (fun t : G => ((fun z : nat => z) m)).
Definition testFunction2 := fun s : nat => match s with zero -> fun t : G => zero | succ m -> fun t : G => m.

Axiom g : G.
Eval testFunction1 two g.
Eval testFunction2 two g.

Axiom n: nat.
Axiom v : P (testFunction1 (succ n) g).
Check v : P (testFunction2 (succ n) g).
Check testFunction1.




